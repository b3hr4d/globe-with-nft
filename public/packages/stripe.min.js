import { A as w, aB as d, aC as c, aF as y, aG as L, aH as x, c as o, G as e, h as u, i as g, k as i, m as h, O as v, P as f, q as n, S as p, T as M, V as m, W as b } from "./three.module.min.js";

function t(e, r, n) {
  return (
    r in e
      ? Object.defineProperty(e, r, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0,
      })
      : (e[r] = n),
    e
  )
}
function E(t, e) {
  const s = new i();
  s.subVectors(e, t).normalize();
  const a = 1 - (0.5 + Math.atan2(s.z, s.x) / (2 * Math.PI)),
    n = 0.5 + Math.asin(s.y) / Math.PI;
  return new m(a, n);
}
function q(t, i) {
  const e = i.width,
    s = i.height,
    a = 4 * Math.floor(t.x * e) + Math.floor(t.y * s) * (4 * e);
  return i.data.slice(a, a + 4);
}

function C(t, i, e, s) {
  const a = t / s - 1;
  return -e * (a * a ** 3 - 1) + i;
}
const D = {
  fl: ["27.9506", "-82.4572"],
  ad: ["42.5000", "1.5000"],
  ae: ["24.0000", "54.0000"],
  af: ["33.0000", "65.0000"],
  ag: ["17.0500", "-61.8000"],
  ai: ["18.2500", "-63.1667"],
  al: ["41.0000", "20.0000"],
  am: ["40.0000", "45.0000"],
  an: ["12.2500", "-68.7500"],
  ao: ["-12.5000", "18.5000"],
  ap: ["35.0000", "105.0000"],
  aq: ["-90.0000", "0.0000"],
  ar: ["-34.0000", "-64.0000"],
  as: ["-14.3333", "-170.0000"],
  at: ["47.3333", "13.3333"],
  au: ["-27.0000", "133.0000"],
  aw: ["12.5000", "-69.9667"],
  az: ["40.5000", "47.5000"],
  ba: ["44.0000", "18.0000"],
  bb: ["13.1667", "-59.5333"],
  bd: ["24.0000", "90.0000"],
  be: ["50.8333", "4.0000"],
  bf: ["13.0000", "-2.0000"],
  bg: ["43.0000", "25.0000"],
  bh: ["26.0000", "50.5500"],
  bi: ["-3.5000", "30.0000"],
  bj: ["9.5000", "2.2500"],
  bm: ["32.3333", "-64.7500"],
  bn: ["4.5000", "114.6667"],
  bo: ["-17.0000", "-65.0000"],
  br: ["-10.0000", "-55.0000"],
  bs: ["24.2500", "-76.0000"],
  bt: ["27.5000", "90.5000"],
  bv: ["-54.4333", "3.4000"],
  bw: ["-22.0000", "24.0000"],
  by: ["53.0000", "28.0000"],
  bz: ["17.2500", "-88.7500"],
  ca: ["54.0000", "-100.0000"],
  cc: ["-12.5000", "96.8333"],
  cd: ["0.0000", "25.0000"],
  cf: ["7.0000", "21.0000"],
  cg: ["-1.0000", "15.0000"],
  ch: ["47.0000", "8.0000"],
  ci: ["8.0000", "-5.0000"],
  ck: ["-21.2333", "-159.7667"],
  cl: ["-30.0000", "-71.0000"],
  cm: ["6.0000", "12.0000"],
  cn: ["35.0000", "105.0000"],
  co: ["4.0000", "-72.0000"],
  cr: ["10.0000", "-84.0000"],
  cu: ["21.5000", "-80.0000"],
  cv: ["16.0000", "-24.0000"],
  cx: ["-10.5000", "105.6667"],
  cy: ["35.0000", "33.0000"],
  cz: ["49.7500", "15.5000"],
  de: ["51.0000", "9.0000"],
  dj: ["11.5000", "43.0000"],
  dk: ["56.0000", "10.0000"],
  dm: ["15.4167", "-61.3333"],
  do: ["19.0000", "-70.6667"],
  dz: ["28.0000", "3.0000"],
  ec: ["-2.0000", "-77.5000"],
  ee: ["59.0000", "26.0000"],
  eg: ["27.0000", "30.0000"],
  eh: ["24.5000", "-13.0000"],
  er: ["15.0000", "39.0000"],
  es: ["40.0000", "-4.0000"],
  et: ["8.0000", "38.0000"],
  eu: ["47.0000", "8.0000"],
  fi: ["64.0000", "26.0000"],
  fj: ["-18.0000", "175.0000"],
  fk: ["-51.7500", "-59.0000"],
  fm: ["6.9167", "158.2500"],
  fo: ["62.0000", "-7.0000"],
  fr: ["46.0000", "2.0000"],
  ga: ["-1.0000", "11.7500"],
  gb: ["54.0000", "-2.0000"],
  gd: ["12.1167", "-61.6667"],
  ge: ["42.0000", "43.5000"],
  gf: ["4.0000", "-53.0000"],
  gh: ["8.0000", "-2.0000"],
  gi: ["36.1833", "-5.3667"],
  gl: ["72.0000", "-40.0000"],
  gm: ["13.4667", "-16.5667"],
  gn: ["11.0000", "-10.0000"],
  gp: ["16.2500", "-61.5833"],
  gq: ["2.0000", "10.0000"],
  gr: ["39.0000", "22.0000"],
  gs: ["-54.5000", "-37.0000"],
  gt: ["15.5000", "-90.2500"],
  gu: ["13.4667", "144.7833"],
  gw: ["12.0000", "-15.0000"],
  gy: ["5.0000", "-59.0000"],
  hk: ["22.2500", "114.1667"],
  hm: ["-53.1000", "72.5167"],
  hn: ["15.0000", "-86.5000"],
  hr: ["45.1667", "15.5000"],
  ht: ["19.0000", "-72.4167"],
  hu: ["47.0000", "20.0000"],
  id: ["-5.0000", "120.0000"],
  ie: ["53.0000", "-8.0000"],
  il: ["31.5000", "34.7500"],
  in: ["20.0000", "77.0000"],
  io: ["-6.0000", "71.5000"],
  iq: ["33.0000", "44.0000"],
  ir: ["32.0000", "53.0000"],
  is: ["65.0000", "-18.0000"],
  it: ["42.8333", "12.8333"],
  jm: ["18.2500", "-77.5000"],
  jo: ["31.0000", "36.0000"],
  jp: ["36.0000", "138.0000"],
  ke: ["1.0000", "38.0000"],
  kg: ["41.0000", "75.0000"],
  kh: ["13.0000", "105.0000"],
  ki: ["1.4167", "173.0000"],
  km: ["-12.1667", "44.2500"],
  kn: ["17.3333", "-62.7500"],
  kp: ["40.0000", "127.0000"],
  kr: ["37.0000", "127.5000"],
  kw: ["29.3375", "47.6581"],
  ky: ["19.5000", "-80.5000"],
  kz: ["48.0000", "68.0000"],
  la: ["18.0000", "105.0000"],
  lb: ["33.8333", "35.8333"],
  lc: ["13.8833", "-61.1333"],
  li: ["47.1667", "9.5333"],
  lk: ["7.0000", "81.0000"],
  lr: ["6.5000", "-9.5000"],
  ls: ["-29.5000", "28.5000"],
  lt: ["56.0000", "24.0000"],
  lu: ["49.7500", "6.1667"],
  lv: ["57.0000", "25.0000"],
  ly: ["25.0000", "17.0000"],
  ma: ["32.0000", "-5.0000"],
  mc: ["43.7333", "7.4000"],
  md: ["47.0000", "29.0000"],
  me: ["42.0000", "19.0000"],
  mg: ["-20.0000", "47.0000"],
  mh: ["9.0000", "168.0000"],
  mk: ["41.8333", "22.0000"],
  ml: ["17.0000", "-4.0000"],
  mm: ["22.0000", "98.0000"],
  mn: ["46.0000", "105.0000"],
  mo: ["22.1667", "113.5500"],
  mp: ["15.2000", "145.7500"],
  mq: ["14.6667", "-61.0000"],
  mr: ["20.0000", "-12.0000"],
  ms: ["16.7500", "-62.2000"],
  mt: ["35.8333", "14.5833"],
  mu: ["-20.2833", "57.5500"],
  mv: ["3.2500", "73.0000"],
  mw: ["-13.5000", "34.0000"],
  mx: ["23.0000", "-102.0000"],
  my: ["2.5000", "112.5000"],
  mz: ["-18.2500", "35.0000"],
  na: ["-22.0000", "17.0000"],
  nc: ["-21.5000", "165.5000"],
  ne: ["16.0000", "8.0000"],
  nf: ["-29.0333", "167.9500"],
  ng: ["10.0000", "8.0000"],
  ni: ["13.0000", "-85.0000"],
  nl: ["52.5000", "5.7500"],
  no: ["62.0000", "10.0000"],
  np: ["28.0000", "84.0000"],
  nr: ["-0.5333", "166.9167"],
  nu: ["-19.0333", "-169.8667"],
  nz: ["-41.0000", "174.0000"],
  om: ["21.0000", "57.0000"],
  pa: ["9.0000", "-80.0000"],
  pe: ["-10.0000", "-76.0000"],
  pf: ["-15.0000", "-140.0000"],
  pg: ["-6.0000", "147.0000"],
  ph: ["13.0000", "122.0000"],
  pk: ["30.0000", "70.0000"],
  pl: ["52.0000", "20.0000"],
  pm: ["46.8333", "-56.3333"],
  pr: ["18.2500", "-66.5000"],
  ps: ["32.0000", "35.2500"],
  pt: ["39.5000", "-8.0000"],
  pw: ["7.5000", "134.5000"],
  py: ["-23.0000", "-58.0000"],
  qa: ["25.5000", "51.2500"],
  re: ["-21.1000", "55.6000"],
  ro: ["46.0000", "25.0000"],
  rs: ["44.0000", "21.0000"],
  ru: ["60.0000", "100.0000"],
  rw: ["-2.0000", "30.0000"],
  sa: ["25.0000", "45.0000"],
  sb: ["-8.0000", "159.0000"],
  sc: ["-4.5833", "55.6667"],
  sd: ["15.0000", "30.0000"],
  se: ["62.0000", "15.0000"],
  sg: ["1.3667", "103.8000"],
  sh: ["-15.9333", "-5.7000"],
  si: ["46.0000", "15.0000"],
  sj: ["78.0000", "20.0000"],
  sk: ["48.6667", "19.5000"],
  sl: ["8.5000", "-11.5000"],
  sm: ["43.7667", "12.4167"],
  sn: ["14.0000", "-14.0000"],
  so: ["10.0000", "49.0000"],
  sr: ["4.0000", "-56.0000"],
  st: ["1.0000", "7.0000"],
  sv: ["13.8333", "-88.9167"],
  sy: ["35.0000", "38.0000"],
  sz: ["-26.5000", "31.5000"],
  tc: ["21.7500", "-71.5833"],
  td: ["15.0000", "19.0000"],
  tf: ["-43.0000", "67.0000"],
  tg: ["8.0000", "1.1667"],
  th: ["15.0000", "100.0000"],
  tj: ["39.0000", "71.0000"],
  tk: ["-9.0000", "-172.0000"],
  tm: ["40.0000", "60.0000"],
  tn: ["34.0000", "9.0000"],
  to: ["-20.0000", "-175.0000"],
  tr: ["39.0000", "35.0000"],
  tt: ["11.0000", "-61.0000"],
  tv: ["-8.0000", "178.0000"],
  tw: ["23.5000", "121.0000"],
  tz: ["-6.0000", "35.0000"],
  ua: ["49.0000", "32.0000"],
  ug: ["1.0000", "32.0000"],
  um: ["19.2833", "166.6000"],
  us: ["38.0000", "-97.0000"],
  uy: ["-33.0000", "-56.0000"],
  uz: ["41.0000", "64.0000"],
  va: ["41.9000", "12.4500"],
  vc: ["13.2500", "-61.2000"],
  ve: ["8.0000", "-66.0000"],
  vg: ["18.5000", "-64.5000"],
  vi: ["18.3333", "-64.8333"],
  vn: ["16.0000", "106.0000"],
  vu: ["-16.0000", "167.0000"],
  wf: ["-13.3000", "-176.2000"],
  ws: ["-13.5833", "-172.3333"],
  ye: ["15.0000", "48.0000"],
  yt: ["-12.8333", "45.1667"],
  za: ["-29.0000", "24.0000"],
  zm: ["-15.0000", "30.0000"],
  zw: ["-20.0000", "30.0000"],
};


const G = 2 * Math.PI,
  W = 0.5 * Math.PI,
  U = 0.1111 * Math.PI,
  V = Math.PI,
  N = 0.1 * Math.PI,
  H = -0.5 * Math.PI,
  B = 0.5 * Math.PI,
  Q = [
    "https://images.ctfassets.net/fzn2n1nzq965/21KQEBsC7QG4IYZV5RuhDz/d3180249af4082f42a22cb5f3ccc8e09/arc-texture-1.png",
    "https://images.ctfassets.net/fzn2n1nzq965/22Apsqcv7VIDzlCuSOEzPQ/2194c40aac8bced46d48582d5d712bf6/arc-texture-2.png",
    "https://images.ctfassets.net/fzn2n1nzq965/79YUdAMNjtlQuuFLN0RBLG/f779fbfcc31d6360893844a29ec5fb4f/arc-texture-3.png",
    "https://images.ctfassets.net/fzn2n1nzq965/7ez6kk9Dk9uuhgdRLFyhZX/220a177ca8529de208f8ae3cc3b10609/arc-texture-4.png",
  ];

export default class Points extends e {
  constructor(t, i, e, s) {
    super(),
      (this.callback = i),
      (this.isStatic = e),
      (this.rotation.x = -Math.PI),
      (this.rotation.z = -Math.PI),
      (this.radius = t),
      (this.isDragging = !1),
      (this.dragTime = 0),
      (this.isDotsOnly = s),
      new d().load(
        "https://images.ctfassets.net/fzn2n1nzq965/11064gUb2CgTJXKVwAt5J9/297a98a65d04d4fbb979072ce60466ab/map_fill-a78643e8.png",
        (t) => {
          const i = (function (t) {
            const i = t.width,
              e = t.height,
              s = document.createElement("canvas");
            (s.width = i), (s.height = e);
            const a = s.getContext("2d");
            return a.drawImage(t, 0, 0), a.getImageData(0, 0, i, e);
          })(t);
          this.mapLoaded(i);
        }
      );
  }
  mapLoaded(t) {
    const e = this.radius / 450,
      s = 1e4 + Math.floor((this.radius / 600) * 7e4),
      a = this.radius,
      r = new c(1.8 * e, 5),
      l = new u(),
      d = [],
      p = [],
      v = new i();
    for (let i = s; i >= 0; i -= 1) {
      const e = Math.acos((2 * i) / s - 1),
        n = Math.sqrt(s * Math.PI) * e;
      v.setFromSphericalCoords(a, e, n),
        l.copy(r),
        l.lookAt(v),
        l.translate(v.x, v.y, v.z),
        l.computeBoundingSphere();
      if (
        q(E(l.boundingSphere.center, this.position), t)[3] > 0 ||
        this.isDotsOnly
      ) {
        const t = Math.random();
        for (let i = 0; i < 5; i += 1)
          d.push(
            l.attributes.position.array[0],
            l.attributes.position.array[1],
            l.attributes.position.array[2],
            l.attributes.position.array[3 + 3 * i],
            l.attributes.position.array[4 + 3 * i],
            l.attributes.position.array[5 + 3 * i],
            l.attributes.position.array[6 + 3 * i],
            l.attributes.position.array[7 + 3 * i],
            l.attributes.position.array[8 + 3 * i]
          ),
            p.push(t, t, t);
        d.push(
          l.attributes.position.array[0],
          l.attributes.position.array[1],
          l.attributes.position.array[2],
          l.attributes.position.array[3],
          l.attributes.position.array[4],
          l.attributes.position.array[5],
          l.attributes.position.array[18],
          l.attributes.position.array[19],
          l.attributes.position.array[20]
        ),
          p.push(t, t, t);
      }
    }
    const b = new u();
    b.setAttribute("position", new g(d, 3))
    b.setAttribute("rndId", new g(p, 1))
    this.material = new n({
      transparent: !0,
      uniforms: {
        u_time: { type: "f", value: 0 },
        u_drag_time: { type: "f", value: 0 },
        u_resolution: { type: "v2", value: new m() },
      },
      vertexShader: `
        uniform float u_time;
        uniform float u_drag_time;
        uniform vec2 u_resolution;
        attribute float rndId;
        varying float vRndId;
        varying float pct;
        void main() {
            vRndId = rndId;
            vec2 st = position.xy/u_resolution;
            pct = min(1.0, u_time / (1000. / max(0.2, 0.2 * sin(fract(rndId)))));
            float vNormal = rndId + ((1.0 - rndId) * pct);
            vNormal = rndId + ((1.0 - rndId));
            vNormal = smoothstep(0., 1.0, vNormal);
            if (u_drag_time > 0.) {
                vNormal -= ((sin(u_time / 400.0 * vRndId) + 1.0) * 0.04) * min(1., u_drag_time / 1200.0);
            }
          vec4 modelViewPosition = modelViewMatrix * vec4(position, vNormal);
          gl_Position = projectionMatrix * modelViewPosition;
        }`,
      fragmentShader: `
        uniform bool u_dragging;
        uniform float u_time;
        uniform float u_drag_time;
        varying float vRndId;
        varying float pct;
        void main() {
            float v = sin(u_time / 200.0 * vRndId);
            float alpha = pct * 0.7 + v * 0.2;
            float r = 0.19;
            float g = 0.42;
            float b = 0.65;
            float dragDur = 1200.0;
            vec3 color = vec3(r, g, b);
            float rInc = min(1.0, u_drag_time / dragDur) * (sin(u_drag_time / (dragDur * 0.5) + 1.0) * 0.1);
            float gInc = min(1.0, u_drag_time / dragDur) * (sin(u_drag_time / (dragDur * 0.75) - 1.0) * 0.1);
            float bInc = min(1.0, u_drag_time / dragDur) * (sin(u_drag_time / dragDur) * 0.1);
            if (u_dragging) {
                    color.r = r + rInc;
                    color.g = g + gInc;
                    color.b = b + bInc;
            }
            gl_FragColor = vec4(color, alpha);
        }`
      })

    this.material.side = h
    const w = new o(b, this.material);
    this.add(w)
    this.material.uniforms.u_resolution.value.x = window.innerWidth
    this.material.uniforms.u_resolution.value.y = window.innerHeight
    this.startTime = performance.now()
    this.dragStartTime = 0
    this.callback();
  }
  startDragging() {
    this.material &&
      !this.isStatic &&
      ((this.isDragging = !0),
        (this.dragStartTime = performance.now()),
        (this.material.uniforms.u_time.value =
          performance.now() - this.dragStartTime));
  }
  stopDragging() {
    this.isDragging = !1;
  }
  updateDragTimer() {
    this.isDragging
      ? (this.dragTime = performance.now() - this.dragStartTime)
      : this.dragTime > 0.1 &&
      (this.dragTime = Math.max(0, 0.9 * this.dragTime));
  }
  animate() {
    if ((this.updateDragTimer(), !this.material)) return;
    this.material.uniforms.u_drag_time.value = this.dragTime;
    const t = this.isStatic ? 3e3 : performance.now() - this.startTime;
    this.material.uniforms.u_time.value = t;
  }
}

class J {
  constructor(e) {
    t(this, "eastCountryList", ["my", "sg", "au", "nz", "hk", "jp", "in"]),
      t(this, "westCountryList", ["ca", "mx", "us", "br"]),
      t(this, "middleCountryList", [
        "be",
        "gb",
        "at",
        "dk",
        "ee",
        "fi",
        "fr",
        "gr",
        "de",
        "ie",
        "it",
        "lv",
        "lt",
        "lu",
        "nl",
        "no",
        "pl",
        "pt",
        "es",
        "sk",
        "si",
        "se",
        "ch",
        "cy",
        "bg",
        "ro",
        "cz",
      ]),
      t(this, "liveCountryList", [
        ...this.eastCountryList,
        ...this.westCountryList,
        ...this.middleCountryList,
      ]),
      t(this, "countryList", Object.keys(D)),
      t(this, "origin", new i(0, 0, 0)),
      t(this, "dom", {}),
      t(this, "mouse", new m()),
      t(this, "isDragging", !1),
      t(this, "isStatic", !1),
      t(this, "isDiscTextureLoaded", !1),
      t(this, "arcTexturesLoaded", 0),
      t(this, "globeOff", !1),
      t(this, "scrollTop", 0),
      t(this, "globeOpacity", 0),
      t(this, "lineCount", 0),
      t(this, "currentLines", []),
      t(this, "arcColors", [
        [16335176, 16763735],
        [11232234, 9494783],
        [16335176, 11232234],
        [16763735, 9494783],
      ]),
      t(this, "scene", new p()),
      t(this, "globeRadius", 350),
      t(this, "globeSegments", 30),
      t(this, "isLoaded", !1),
      t(this, "loaded", []),
      t(this, "loading", []),
      t(this, "isScrolling", !1),
      t(this, "isRevealed", !1),
      t(this, "frame", 0),
      t(this, "oldRotationY", 0),
      t(this, "oldRotationX", 0),
      t(this, "newRotationY", 0),
      t(this, "newRotationX", 0),
      t(this, "globeRotationIncrement", 0.02),
      t(this, "targetScale", 1),
      t(this, "scale", 1),
      t(this, "oldMouseX", 0),
      t(this, "oldMouseY", 0),
      t(this, "moveX", 0),
      t(this, "moveY", 0),
      t(this, "tension", 1),
      t(this, "initialized", !1),
      t(this, "el", void 0),
      t(this, "isDotsOnly", void 0),
      t(this, "isLayers", void 0),
      t(this, "touchStartX", void 0),
      t(this, "touchStartY", void 0),
      t(this, "touchDistanceX", void 0),
      t(this, "touchDistanceY", void 0),
      t(this, "aspectRatio", void 0),
      t(this, "oldInnerWidth", void 0),
      t(this, "windowW", void 0),
      t(this, "windowH", void 0),
      t(this, "lineInterval", void 0),
      t(this, "renderAnimationFrame", void 0),
      t(this, "throwAnimationFrame", void 0),
      t(this, "arcTextures", void 0),
      t(this, "circleTexture", void 0),
      t(this, "globeFillMaterial", void 0),
      t(this, "globeOuterLayer", void 0),
      t(this, "globeOuterLayerMaterial", void 0),
      t(this, "camera", void 0),
      t(this, "renderer", void 0),
      t(this, "globeDots", void 0),
      t(this, "linesContainer", void 0),
      t(this, "globeFill", void 0),
      t(this, "globeContainer", void 0),
      t(this, "globeMap", void 0),
      t(this, "globeOuterLayerSphere", void 0),
      t(this, "globeFillSphere", void 0),
      t(this, "handleDragStart", () => {
        this.globeDots.startDragging(),
          (this.isDragging = !0),
          (this.oldRotationX = this.globeContainer.rotation.x),
          (this.oldRotationY = this.globeContainer.rotation.y),
          (this.targetScale = this.isStatic ? 1 : 0.98),
          document.documentElement.classList.add("is-globe-dragging");
      }),
      t(this, "handleTouchStart", (t) => {
        const i = t.touches[0] || t.changedTouches[0];
        (this.oldMouseX = i.pageX),
          (this.oldMouseY = i.pageY),
          (this.mouse.x = i.pageX),
          (this.mouse.y = i.pageY),
          (this.touchStartX = i.pageX),
          (this.touchStartY = i.pageY),
          this.handleDragStart();
      }),
      t(this, "handleMouseMove", (t) => {
        (this.mouse.x = t.clientX),
          (this.mouse.y = t.clientY),
          this.handleDragging();
      }),
      t(this, "handleTouchMove", (t) => {
        const i = t.touches[0] || t.changedTouches[0];
        (this.touchDistanceX = Math.abs(this.touchStartX - i.pageX)),
          (this.touchDistanceY = Math.abs(this.touchStartY - i.pageY)),
          this.touchDistanceY > this.touchDistanceX ||
          ((this.mouse.x = i.pageX),
            (this.mouse.y = i.pageY),
            this.handleDragging());
      }),
      t(this, "handleMouseUp", () => {
        setTimeout(() => {
          document.documentElement.classList.remove("is-globe-dragging");
        }, 20),
          (this.isDragging = !1),
          (0 !== this.moveX || Math.abs(this.moveY) > 0) &&
          this.throwGlobe(this.moveX, this.moveY),
          (this.oldMouseX = 0),
          (this.oldMouseY = 0),
          (this.moveX = 0),
          (this.moveY = 0),
          (this.targetScale = 1),
          this.globeDots.stopDragging();
      }),
      t(this, "handleMouseDown", (t) => {
        document.documentElement.classList.add("is-globe-dragging"),
          (this.oldMouseX = t.clientX),
          (this.oldMouseY = t.clientY),
          this.handleDragStart();
      }),
      t(this, "handleDragging", () => {
        this.isDragging &&
          ((this.tension = 1 + Math.abs(this.oldRotationX)),
            (this.tension **= this.tension),
            (this.moveX = -0.003 * (this.oldMouseX - this.mouse.x)),
            (this.moveY =
              (-0.003 * (this.oldMouseY - this.mouse.y)) / this.tension),
            (this.newRotationY = this.resetRevolutions(
              this.oldRotationY + this.moveX
            )),
            (this.newRotationX = Math.max(
              H,
              Math.min(B, this.oldRotationX + this.moveY)
            )),
            (this.globeContainer.rotation.y = this.newRotationY),
            (this.globeContainer.rotation.x = this.newRotationX),
            (this.oldRotationY = this.newRotationY),
            (this.oldRotationX = this.newRotationX),
            (this.oldMouseX = this.mouse.x),
            (this.oldMouseY = this.mouse.y));
      }),
      t(this, "setWindowSize", () => {
        (this.windowW = this.el.clientWidth),
          (this.windowH = this.el.clientHeight),
          (this.aspectRatio = 1),
          this.renderer.setSize(this.windowW, this.windowH),
          (this.oldInnerWidth = this.windowW);
      }),
      t(this, "handleResize", () => {
        const { clientWidth: t } = document.documentElement;
        (this.oldInnerWidth !== t || t > 512) &&
          (this.setWindowSize(), this.addCamera());
      }),
      (this.el = e),
      this.load();
  }
  load() {
    return (
      this.loading.push("scene"),
      (this.dom.container = this.el),
      (this.isDotsOnly =
        !!this.el.dataset.globeType && "dots" === this.el.dataset.globeType),
      (this.isLayers =
        !!this.el.dataset.globeType && "layers" === this.el.dataset.globeType),
      (this.globeRadius = Math.min(this.el.clientWidth / 2 - 30, 350)),
      this.addRenderer(),
      this.addLighting(),
      this.addGlobe(),
      this.addListeners(),
      this.setWindowSize(),
      this.addCamera(),
      this.objectLoaded("scene"),
      this.play(),
      !0
    );
  }
  play() {
    this.initialized
      ? (this.currentLines.forEach((t) => t.play()), this.drawLines())
      : this.addLines(),
      (this.initialized && this.isStatic) || this.render(this.frame),
      (this.initialized = !0);
  }
  pause() {
    this.currentLines.forEach((t) => t.pause()),
      cancelAnimationFrame(this.renderAnimationFrame),
      clearInterval(this.lineInterval);
  }
  disconnect() {
    clearInterval(this.lineInterval),
      cancelAnimationFrame(this.renderAnimationFrame),
      cancelAnimationFrame(this.throwAnimationFrame),
      window.removeEventListener("resize", this.handleResize),
      this.isStatic ||
      (window.removeEventListener("mouseup", this.handleMouseUp),
        window.removeEventListener("mousemove", this.handleMouseMove),
        this.el.removeEventListener("touchstart", this.handleTouchStart),
        window.removeEventListener("touchmove", this.handleTouchMove),
        window.removeEventListener("touchend", this.handleMouseUp),
        this.el.removeEventListener("mousedown", this.handleMouseDown));
  }
  setCountryList(t) {
    this.countryList = t;
  }
  addCamera() {
    const t = 0.5 * this.windowH,
      i = -this.aspectRatio * this.windowH * 0.5,
      e = 4 * this.globeRadius;
    this.camera || (this.camera = new v(0, 0, 0, 0, 0, 0)),
      (this.camera.left = i),
      (this.camera.right = -i),
      (this.camera.top = t),
      (this.camera.bottom = -t),
      (this.camera.near = -e),
      (this.camera.far = e),
      this.camera.updateProjectionMatrix();
  }
  addRenderer() {
    (this.renderer = new b({ antialias: !1, alpha: !0 })),
      this.renderer.setPixelRatio(window.devicePixelRatio),
      this.renderer.setClearColor(14540253, 0),
      (this.renderer.sortObjects = !1),
      this.dom.container.appendChild(this.renderer.domElement);
  }
  addLighting() {
    const t = new w(10086140, 1);
    this.scene.add(t);
    const i = new f(12775677, 2, 0, 2);
    i.position.set(-1e3, -1100, -3300), this.scene.add(i);
    const e = new f(10593711, 0.8, 0, 20);
    e.position.set(-3e3, 3e3, 3300), this.scene.add(e);
  }
  addGlobe() {
    (this.globeContainer = new e()),
      this.scene.add(this.globeContainer),
      this.addGlobeMap(),
      this.addGlobeDots(),
      this.addGlobeFill(),
      (this.globeContainer.position.z = 2 * -this.globeRadius),
      (this.globeContainer.rotation.x = this.isDotsOnly ? W : U),
      (this.globeContainer.rotation.y = this.isStatic ? N : V);
  }
  addGlobeDots() {
    const t = this.isLayers
      ? this.globeRadius - 0.25 * this.globeRadius
      : this.globeRadius;
    this.loading.push("globeDots"),
      (this.globeDots = new Points(
        t,
        () => {
          this.objectLoaded("globeDots");
        },
        this.isStatic,
        this.isDotsOnly
      )),
      this.globeMap.add(this.globeDots);
  }
  addGlobeFill() {
    this.globeFillMaterial = new y({
      transparent: !0,
      opacity: 1,
      color: 1056824,
    });
    const t = this.isLayers
      ? this.globeRadius - 0.5 * this.globeRadius
      : this.globeRadius - 0.1;
    (this.globeFillSphere = new L(t, this.globeSegments, this.globeSegments)),
      (this.globeFill = new o(this.globeFillSphere, this.globeFillMaterial)),
      this.globeMap.add(this.globeFill);
  }
  addGlobeMap() {
    (this.globeMap = new e()), this.globeContainer.add(this.globeMap);
  }
  throwGlobe(t, i) {
    const e = 0.94 * t,
      s = 0.94 * i,
      a = this.globeContainer.rotation.y + e,
      n = Math.max(H, Math.min(B, this.globeContainer.rotation.x + s));
    (this.globeContainer.rotation.y = this.resetRevolutions(a)),
      (this.globeContainer.rotation.x = n),
      (Math.abs(e) > 0.001 || Math.abs(s) > 0.001) &&
      !1 === this.isDragging &&
      (this.throwAnimationFrame = requestAnimationFrame(() => {
        this.throwGlobe(e, s);
      }));
  }
  addLines() {
    this.isDotsOnly ||
      ((this.circleTexture = new M().load(
        "https://images.ctfassets.net/fzn2n1nzq965/2wn0qc94lx6dbfTVt1vpuO/cf3e66080a3cddeb7275a8fefbca5134/disc_texture.png",
        () => {
          this.isDiscTextureLoaded = !0;
        }
      )),
        (this.arcTextures = Q.map((t) =>
          new M().load(t, () => {
            this.arcTexturesLoaded += 1;
          })
        )),
        (this.linesContainer = new e()),
        this.globeContainer.add(this.linesContainer),
        this.drawLines(),
        this.isLayers &&
        ((this.globeOuterLayerMaterial = new x({
          transparent: !0,
          opacity: 0.05,
        })),
          (this.globeOuterLayerSphere = new L(
            this.globeRadius,
            this.globeSegments,
            this.globeSegments
          )),
          (this.globeOuterLayer = new o(
            this.globeOuterLayerSphere,
            this.globeOuterLayerMaterial
          )),
          this.globeContainer.add(this.globeOuterLayer)));
  }
  drawLines() {
    if (!this.isStatic && !this.isDotsOnly)
      return (
        clearInterval(this.lineInterval),
        void (this.lineInterval = window.setInterval(() => {
          this.drawLine();
        }, 1e3))
      );
    if (0 === this.lineCount) for (let t = 0; t < 5; t += 1) this.drawLine();
  }
  drawLine() {
    this.lineCount += 1;
    const t = this.resetRevolutions(this.globeContainer.rotation.y);
    let i = this.countryList[this.lineCount % this.countryList.length],
      e = this.liveCountryList[this.lineCount % this.liveCountryList.length];
    if (
      ((t < 5.7 && t > 4.4) || (t > -2 && t < -0.2)
        ? (e =
          this.eastCountryList[this.lineCount % this.eastCountryList.length])
        : (t < 4.2 && t > 2.2) || (t > -4 && t < -1.7)
          ? (((t < -1.7 && t > -3) || (t > 3 && t < 4.2)) &&
            (i =
              this.eastCountryList[
              this.lineCount % this.eastCountryList.length
              ]),
            (e =
              this.westCountryList[this.lineCount % this.westCountryList.length]))
          : ((t < 2.2 && t > 0.3) || (t > -6.28 && t < -4)) &&
          (e =
            this.middleCountryList[
            this.lineCount % this.middleCountryList.length
            ]),
        i === e)
    )
      return void this.drawLine();
  }
  hideLine(t) {
    t.hideLine(),
      setTimeout(() => {
        t.disposeLine(), this.linesContainer.remove(t);
      }, 1500);
  }
  objectLoaded(t = "x") {
    this.loaded.push(t),
      this.loaded.length === this.loading.length && (this.isLoaded = !0);
  }
  resetRevolutions(t) {
    if (0 === Math.abs(t / G)) return t;
    return t - Math.floor(Math.abs(t / G)) * Math.sign(t) * G;
  }
  addListeners() {
    window.addEventListener("resize", this.handleResize),
      this.isStatic ||
      (window.addEventListener("mouseup", this.handleMouseUp),
        window.addEventListener("mousemove", this.handleMouseMove),
        this.el.addEventListener("touchstart", this.handleTouchStart, {
          passive: !0,
        }),
        window.addEventListener("touchmove", this.handleTouchMove),
        window.addEventListener("touchend", this.handleMouseUp),
        this.el.addEventListener("mousedown", this.handleMouseDown));
  }
  revealAnimation() {
    const t = this.isStatic ? 1 : C(this.globeOpacity, 0, 1, 1);
    (this.globeOpacity += 0.005),
      (this.globeFillMaterial.opacity = 0.94 * t),
      (this.globeRotationIncrement = 0.02 * (1 - t) + 0.001 * t),
      t > 0.999 && (this.isRevealed = !0);
  }
  autoRotateGlobe() {
    this.isDragging ||
      this.isScrolling ||
      this.isStatic ||
      (this.globeContainer.rotation.y -= this.globeRotationIncrement);
  }
  render(t = 0) {
    (this.frame = t),
      this.autoRotateGlobe(),
      Math.abs(this.scale - this.targetScale) > 0.001 &&
      ((this.scale -= 0.1 * (this.scale - this.targetScale)),
        this.globeFill.scale.set(this.scale, this.scale, this.scale)),
      !this.globeOff &&
      this.isLoaded &&
      (this.globeDots.animate(),
        this.isRevealed || this.revealAnimation(),
        this.renderer.render(this.scene, this.camera)),
      (this.renderAnimationFrame = requestAnimationFrame(() => {
        this.isRevealed &&
          this.isStatic &&
          this.arcTexturesLoaded === Q.length &&
          this.isDiscTextureLoaded
          ? this.renderer.render(this.scene, this.camera)
          : this.render(t + 1);
      }));
  }
}
const Globe = J

// draw canvas on globe
const div = document.getElementById("globe")

new Globe(div)
